from Crypto.Util.number import *

n= 89363852083183215084029975819623368020820853090098307473149845603341401045864934870570439256932632891265049547636998969703995375576460547095664091050686702009560848161533709748580943299702189297193534891972420842645361436489923822342004115286990841721297153500393107766316207595723258425173398506150683897157
e= 65537
c= 86806010536421428215138479024493529957254730212140712219406478401080347255310427820183046206405676261342754941707821722897347193983277842445151970816004013705244354576275846473959424227587946606819026532227502887761334668519249015633183869419896266715931667308536148698335454941446604091954057806509134160714
leaked_bits= 8519065679210462875347890550002311295807311144091750402590996981174033798178225468961955441999549942033

leaked_bits = bin(leaked_bits)[2:]
leaked_bits= str(leaked_bits)+ "0"*(512-len(leaked_bits))
leaked_bits = int(leaked_bits,2)
r= 2**170
M= matrix([[r**2, r*leaked_bits, 0], [0, r, leaked_bits], [0, 0, n]])
A= M.LLL()
P.<x> = PolynomialRing(Zmod(n))
f = A[0][0]*x**2/r**2+A[0][1]*x/r+A[0][2]
f = f.monic()
a= f.small_roots()
p= int(leaked_bits+ a[0])
q= n/p
phi= (p-1)*(q-1)
d= pow(e, -1, phi)
m= pow(c, d, n)
print(long_to_bytes(m))
